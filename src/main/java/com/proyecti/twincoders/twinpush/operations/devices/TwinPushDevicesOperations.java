package com.proyecti.twincoders.twinpush.operations.devices;

import java.util.Map;

import org.springframework.http.ResponseEntity;

import com.proyecti.twincoders.twinpush.dto.request.createDevice.CreateDeviceRequestDTO;
import com.proyecti.twincoders.twinpush.dto.request.searchNotification.SearchNotificationsRequestDTO;
import com.proyecti.twincoders.twinpush.dto.request.setCustomProperty.SetCustomPropertyRequestDTO;
import com.proyecti.twincoders.twinpush.dto.request.updateBadge.UpdateBadgeRequestDTO;
import com.proyecti.twincoders.twinpush.dto.response.createDevice.CreateDeviceResponseDTO;
import com.proyecti.twincoders.twinpush.dto.response.deleteCustomProperties.ClearCustomPropertiesResponseDTO;
import com.proyecti.twincoders.twinpush.dto.response.destroyDevice.DestroyDeviceResponseDTO;
import com.proyecti.twincoders.twinpush.dto.response.searchNotification.SearchNotificationsResponseDTO;
import com.proyecti.twincoders.twinpush.dto.response.setCustomProperty.SetCustomPropertyResponseDTO;
import com.proyecti.twincoders.twinpush.dto.response.updateBadge.UpdateBadgeResponseDTO;


public interface TwinPushDevicesOperations {


	/***
	 * Creates a new device. Typically you'll want to do this once the app is launched. 
	 * If the device is already in the database (checked by the udid) is returned. 
	 * 
	 * The udid is a string, unique for an application. It does not need to be the actual 
	 * udid of Apple, it can be a string generated by your application that identifies every 
	 * device that has the application installed.
	 * 
	 * The maximum size for an alias is 180 characters, the minimum is 1. If an empty string 
	 * is passed the alias will be set to nil.
	 * 
	 */
	ResponseEntity<CreateDeviceResponseDTO> createDevice(final Map<String,String> uriVariablesMap, CreateDeviceRequestDTO createDeviceRequestDTO);


	/**
	 * Updated the badge of a device. The possible values are:
	 *  
	 *  - A number, like 4, 5 or 900: The badge will be updated to that number.
	 *  - A plus sign and a number, like +1 or +400: The badge will be updated to the previous value plus the passed one.
	 *  - A minus sign and a number, like -1 or -400: The badge will be updated to the previous value minus the passed one.

	 *  If the new value is negative it will be set to 0.
	 */
	ResponseEntity<UpdateBadgeResponseDTO> updateBadge(Map<String,String> uriVariablesMap, UpdateBadgeRequestDTO updateBadgeRequestDTO);

	
	/**
	 * Search notifications with tags.
	 * 
	 * This will return all the notifications that have the tag moritaka AND one and don't have the tag two.
	 * 
	 * The all parameter (false by default) allows you to get all the notifications without taking into 
	 * account the send date. 
	 * 
	 * If all is false or is not present only the notifications sent until now will be returned.
	 */
	ResponseEntity<SearchNotificationsResponseDTO> searchNotificationByDevice(Map<String,String> uriVariablesMap, SearchNotificationsRequestDTO searchNotificationsRequestDTO);

	
	/**
	 * Destroys an existing device.
	 */
	ResponseEntity<DestroyDeviceResponseDTO> destroyDevice(Map<String, String> uriVariablesMap);

	
	/**
	 * Assign the value for the given custom property at the selected device.
	 * 
	 * If a null value is given, the custom property will be deleted from the device.

	 * The given value for a custom property must match with property type.
	 */
	ResponseEntity<SetCustomPropertyResponseDTO> setCustomProperty(Map<String, String> uriVariablesMap, SetCustomPropertyRequestDTO updateCustomPropertiesRequestDTO);


	/**
	 * Deletes all the custom property values associated with the given device.
	 */
	ResponseEntity<ClearCustomPropertiesResponseDTO> clearCustomProperties(Map<String, String> uriVariablesMap);
	
}
